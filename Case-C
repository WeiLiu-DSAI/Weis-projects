WITH
  #Month to month sum of MRR and growth
  AGG_MRR AS(
  SELECT
    month,
    sum_MRR,
    (sum_MRR - LAG(sum_MRR) OVER (ORDER BY month)) / LAG(sum_MRR) OVER (ORDER BY month) monthly_growth
  FROM (
    SELECT
      FORMAT_DATE('%Y-%m',DATE_TRUNC(date, MONTH)) AS month,
      SUM(mrr_movement_usd) AS sum_MRR
    FROM
      `tangential-rush-346021.MRR.MRR`
    GROUP BY
      1 )
  ORDER BY
    1 ),

  #Cumsum of MRR for each customer
  Cumulative_MRR AS(
  SELECT
    CustomerID,
    date,
    mrr_movement_usd,
    movement_type,
    DIV(DATE_DIFF(IFNULL(LEAD(date) OVER (PARTITION BY CustomerID ORDER BY date),
          DATE'2019-08-31'),date, DAY),30) month_on_this_plan,
    SUM(mrr_movement_usd) OVER(PARTITION BY CustomerID ORDER BY date) cum_MRR
  FROM
    `tangential-rush-346021.MRR.MRR` ),

  #Calculates the period each customer stayed under each different plan they had, and the revenue they generated during each of such period
  Payments_during_each_plan AS(
  SELECT
    CustomerID,
    date,
    mrr_movement_usd,
    movement_type,
    month_on_this_plan,
    cum_MRR,
    cum_MRR * month_on_this_plan payment
  FROM
    Cumulative_MRR
  GROUP BY
    1,2,3,4,5,6 ),

  #Sum of aformentioned revenue for each customer
  Monthly_payment AS(
  SELECT
    CustomerID,
    SUM(payment) payments
  FROM
    Payments_during_each_plan
  GROUP BY
    1 ),

  #Calculates the payment each customer made when they enroll or reactivate
  Start_up_cost AS (
  SELECT
    CustomerID,
    SUM(CASE
        WHEN movement_type IN ('new_biz', 'reactivation') THEN mrr_movement_usd
      ELSE
      0
    END
      ) cost
  FROM
    `tangential-rush-346021.MRR.MRR`
  GROUP BY
    1 ),

  #Life time value of each customer
  Customer_revneue AS(
  SELECT
    monthly_payment.CustomerID,
    monthly_payment.payments + start_up_cost.cost Revenue
  FROM
    monthly_payment
  LEFT JOIN
    start_up_cost
  ON
    monthly_payment.CustomerID = start_up_cost.CustomerID ),

  #General info about the customer
  Customer_info AS(
  SELECT
    CustomerID,
    age,
    gender,
    country,
    MIN(date) OVER (PARTITION BY CustomerID ORDER BY date) enroll_date,
  FROM
    `tangential-rush-346021.MRR.MRR` ),

  #Date of the first churn if churned for each customer
  First_Churn AS(
  SELECT
    DISTINCT CustomerID,
    MIN(date) first_churn_date
  FROM
    `tangential-rush-346021.MRR.MRR`
  WHERE
    movement_type = 'churn'
  GROUP BY
    1),

  #Date of reactivation if reactivated for each customer
  Reactivation AS(
  SELECT
    DISTINCT CustomerID,
    MIN(date) reactivation_date
  FROM
    `tangential-rush-346021.MRR.MRR`
  WHERE
    movement_type = 'reactivation'
  GROUP BY
    1),

  #Date of second churn if churned after reactivation, luckily there are no customers who have reactivated more than once
  Second_Churn AS(
  SELECT
    DISTINCT CustomerID,
    date second_churn_date
  FROM
    `tangential-rush-346021.MRR.MRR`
  WHERE
    movement_type = 'churn'
    AND TRUE QUALIFY ROW_NUMBER() OVER(PARTITION BY CustomerID ORDER BY date) = 2 ),

  #Complete profile for each customer
  Customer AS (
  SELECT
    DISTINCT Customer_revneue.CustomerID,
    Customer_info.age,
    Customer_info.gender,
    Customer_info.country,
    Customer_info.enroll_date,
    First_Churn.first_churn_date,
    Reactivation.reactivation_date,
    Second_Churn.second_churn_date,
    ROUND(Customer_revneue.Revenue,2) Revenue
  FROM
    Customer_revneue
  LEFT JOIN
    Customer_info ON Customer_revneue.CustomerID = Customer_info.CustomerID
  LEFT JOIN
    First_Churn ON Customer_revneue.CustomerID = First_Churn.CustomerID
  LEFT JOIN
    Reactivation ON Customer_revneue.CustomerID = Reactivation.CustomerID
  LEFT JOIN
    Second_Churn ON Customer_revneue.CustomerID = Second_Churn.CustomerID ),

  #Average days till churn if churned for customers enrolled in each recorded month
  Days_to_churn AS (
  SELECT
    month,
    AVG(days)
  FROM (
    #Customers who reactivated and churned again are considered different customers in this regard
    SELECT
      DATE_TRUNC(enroll_date, MONTH) month,
      AVG(DATE_DIFF(first_churn_date, enroll_date, DAY)) AS days,
    FROM
      Customer
    WHERE
      first_churn_date IS NOT NULL
    GROUP BY
      1
    UNION ALL
    SELECT
      DATE_TRUNC(reactivation_date, MONTH) month,
      AVG(DATE_DIFF(second_churn_date, reactivation_date, DAY)) AS days,
    FROM
      Customer
    WHERE
      second_churn_date IS NOT NULL
    GROUP BY
      1 )
  GROUP BY
    1 ),

  #Active number of subscriptions from month to month
  active_monthly_subscriptions AS(
  SELECT
    month,
    SUM(active_subscriptions) active_subscriptions
  FROM (
    SELECT
      month,
      COUNT(DISTINCT CustomerID) active_subscriptions
    FROM (
      SELECT AS STRUCT DATE_TRUNC(MIN(date),MONTH) min_date, DATE_TRUNC(MAX(date),MONTH) max_date FROM `tangential-rush-346021.MRR.MRR`),
      UNNEST(GENERATE_DATE_ARRAY(min_date, max_date, INTERVAL 1 month)) month
    JOIN
      Customer
    ON
      (Customer.enroll_date < DATE_ADD(month, INTERVAL 1 month))
      AND (Customer.first_churn_date >= month
        OR Customer.first_churn_date IS NULL)
    GROUP BY
      month

    UNION ALL

    SELECT
      month,
      COUNT(DISTINCT CustomerID) active_subscriptions
    FROM (
      SELECT
        AS STRUCT DATE_TRUNC(MIN(date),MONTH) min_date,
        DATE_TRUNC(MAX(date),MONTH) max_date
      FROM
        `tangential-rush-346021.MRR.MRR`),
      UNNEST(GENERATE_DATE_ARRAY(min_date, max_date, INTERVAL 1 month)) month
    JOIN
      Customer
    ON
      (Customer.reactivation_date < DATE_ADD(month, INTERVAL 1 month))
      AND (Customer.second_churn_date >= month
        OR Customer.second_churn_date IS NULL)
    GROUP BY
      month )
  GROUP BY
    1 ),

  #Month to Month growth of subscription numbers
  monthly_subscriber_growth AS(
  SELECT
    month,
    active_subscriptions,
    (active_subscriptions - LAG(active_subscriptions) OVER (ORDER BY month))/LAG(active_subscriptions) OVER (ORDER BY month) AS growth
  FROM
    active_monthly_subscriptions )

SELECT
  *
FROM
  Customer_revneue
ORDER BY
  1
